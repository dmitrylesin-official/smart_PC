'''
Software Use License

Copyright ¬© 2025 Dmitry Lesin

Permission is hereby granted, free of charge, to any person obtaining a copy of this software
and associated documentation files (the "Software"), to use the Software subject to the following conditions:

Copyright Notice and Permission
The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

Restrictions on Use and Distribution
The licensee may not:

‚Ä¢ Sell, transfer, or sublicense the Software in any form, including modified versions.
‚Ä¢ Use the Software for commercial purposes without prior written consent from the Licensor.
‚Ä¢ Modify, adapt, create derivative works based on the Software, or distribute such works
without prior written consent from the Licensor.

Personal Use
The Software may only be used for personal, non-commercial purposes. Commercial use of the Software
in any project is prohibited without prior written consent from the Licensor.

Disclaimer
The Software is provided "as is," without any warranties, express or implied, including but not
limited to warranties of merchantability, fitness for a particular purpose, and non-infringement.
In no event shall the authors or copyright holders be liable for any claims, damages, or other
liabilities, whether in an action of contract, tort, or otherwise, arising from, out of, or in
connection with the Software or the use or other dealings in the Software.
'''



from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram import F
import asyncio
import webbrowser
import random
import os
import time
import sounddevice as sd
import scipy.io.wavfile as wav
import mss
import pyautogui
import keyboard
import platform
import psutil
import requests
import pygetwindow as gw
import json
import shutil
import subprocess
import winreg
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from aiogram.fsm.state import StatesGroup, State
import ctypes
import pyperclip
from aiogram.fsm.context import FSMContext
from cryptography.fernet import Fernet
import sqlite3
import wave
import cv2
from urllib.parse import quote
from typing import Union
import sys
from aiogram.exceptions import TelegramBadRequest
import datetime

CONFIG_FILE = "config.json"

ADMIN_ID = 6516067694


def load_config():
    if not os.path.exists(CONFIG_FILE):
        raise FileNotFoundError(f"{CONFIG_FILE} —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
    with open(CONFIG_FILE, "r") as file:
        config = json.load(file)
    return config.get("API_TOKEN"), config.get("authorized_user_id"), config.get("key_user")


def check_user_key(user_key, valid_keys):
    if user_key not in valid_keys:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")


try:
    API_TOKEN, authorized_user_id, key_user = load_config()

    keys_users = [
        ""
    ]

    check_user_key(key_user, keys_users)


except FileNotFoundError as e:
    print(e)
    exit(1)
except ValueError as e:
    print(e)
    exit(1)


bot = Bot(token=API_TOKEN)
dp = Dispatcher()

language_user = "English"
dnd_enabled = False

def is_authorized(user_id):
    return str(user_id.chat.id) == authorized_user_id

SendInput = ctypes.windll.user32.keybd_event

youtube_context = {}
user_notifications = {}
user_data = {}

TEMP_FOLDER = os.getenv("TEMP")
youtube_pattern = r"^(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+$"
url_pattern = r"^(https?://)?[^\s/$.?#].[^\s]*$"


def load_settings():
    try:
        with open("settings.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_settings(updated_settings):
    settings = load_settings()
    settings.update(updated_settings)

    with open("settings.json", "w", encoding="utf-8") as file:
        json.dump(settings, file, indent=4, ensure_ascii=False)


def load_disk_path():
    settings = load_settings()
    if "disk_path" not in settings:
        settings["disk_path"] = "C:/"
        save_settings(settings)
    return settings["disk_path"]


def save_disk_path(new_path):
    save_settings({"disk_path": new_path})

settings = load_settings()
browser = settings.get("browser", "Google Chrome")
do_not_disturb_enabled = settings.get("do_not_disturb_enabled", False)

disk_path = load_disk_path()

# enter the SHODAN IP
SHODAN_API_KEY = "BkR5Nt4LBj51KyupnTD2riZlQoNWmwTM"


@dp.callback_query(lambda call: call.data == "btn_murder_ru")
async def shutdown_bot(call: types.CallbackQuery, bot: Bot):
    await call.message.answer("smartPC Pro –æ—Ç–∫–ª—é—á–µ–Ω!")
    await asyncio.sleep(1)
    sys.exit(0)


@dp.message(Command("start"))
async def start_command(message: types.Message):
    if is_authorized(message):
        markup_ru_cont = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="ru_cont")]
            ]
        )
        await message.answer(
            """üëã<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! smartPC Pro | Lexium —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å. –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!</b> üéØ\n\n""",
            reply_markup=markup_ru_cont,
            parse_mode="HTML",
        )
    else:
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")


@dp.callback_query(lambda call: call.data == 'ru_cont')
async def cont_ru(call: types.CallbackQuery):
    await call.message.delete()

    try:
        photo = FSInputFile("assets/image/smartpc_pro.png")

        btn_favourites_ru = InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è", callback_data="favourites_ru")
        btn_main_ru = InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚öôÔ∏è", callback_data="main_commands_ru")
        main_btn_ru = InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏üîò", callback_data="main_btn_ru")
        btn_apps_ru = InlineKeyboardButton(text="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è üì±", callback_data="apps_commands_ru")
        apps_youtube_ru = InlineKeyboardButton(text="YouTube ‚ñ∂Ô∏è", callback_data="apps_youtube_ru")
        btn_sait_ru = InlineKeyboardButton(text="–°–∞–π—Ç—ã üåê", callback_data="sait_commands_ru")
        btn_my_computer_ru = InlineKeyboardButton(text="–ü—Ä–æ –º–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä üñ•", callback_data="my_computer_ru")
        btn_clearing_ru = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∫–∞üóë", callback_data="clearing_ru")
        btn_keyboard_control_ru = InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üì≤", callback_data='keyboard_control_ru')
        btn_browser_management = InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º üåé", callback_data="btn_browser_management")
        btn_files_ru = InlineKeyboardButton(text="–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ üóÇ", callback_data="files_ru")
        btn_pro_func_ru = InlineKeyboardButton(text="Pro —Ñ—É–Ω–∫—Ü–∏–∏ üòà", callback_data="pro_func_ru")
        btn_personal_account_ru = InlineKeyboardButton(text="–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Çüë§", callback_data="personal_account_ru")
        btn_telegraph_ru = InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                                url="https://telegra.ph/smartPC-Your-Smart-Assistant-for-PC-Management-in-Jarvis-Style-11-21")
        btn_murder_ru = InlineKeyboardButton(text="‚ùå–í—ã–∫–ª—é—á–∏—Ç—å smartPC Pro‚ùå", callback_data="btn_murder_ru")
        markup_ru = InlineKeyboardMarkup(inline_keyboard=[
            [btn_favourites_ru],
            [btn_main_ru, main_btn_ru],
            [btn_apps_ru, btn_sait_ru],
            [btn_my_computer_ru, apps_youtube_ru],
            [btn_clearing_ru, btn_keyboard_control_ru],
            [btn_browser_management],
            [btn_files_ru],
            [btn_pro_func_ru],
            [btn_personal_account_ru],
            [btn_telegraph_ru],
            [btn_murder_ru]
        ])

        await call.message.answer_photo(
            photo=photo,
            caption="‚ö°Ô∏è <b>smartPC Pro | Lexium</b> ‚ö°Ô∏è",
            reply_markup=markup_ru,
            parse_mode="HTML"
        )
    except Exception as e:
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@dp.callback_query(lambda call: call.data == 'main_commands_ru')
async def main_commands_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n
""", reply_markup=markup_main_ru, parse_mode="HTML")


btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
btn_shutdown_ru = InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ‚úÖ", callback_data="btn_shutdown_ru")
btn_restart_ru = InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ üîÑ", callback_data="btn_restart_ru")
btn_sleep_ru = InlineKeyboardButton(text="–°–ø—è—â–∏–π —Ä–µ–∂–∏–º üí§", callback_data="btn_sleep_ru")
btn_lock_ru = InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω üëÄ", callback_data="btn_lock_ru")
btn_screenshot_ru = InlineKeyboardButton(text="–°–∫—Ä–∏–Ω—à–æ—Ç üì∏", callback_data="btn_screenshot_ru")
btn_switch_layout_ru = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê", callback_data="btn_switch_layout_ru")
btn_collapse_ru = InlineKeyboardButton(text="–°–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–∞ üñ±Ô∏è", callback_data="btn_collapse_ru")
btn_scroll_up_ru = InlineKeyboardButton(text="–°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö ‚¨ÜÔ∏è", callback_data="btn_scroll_up_ru")
btn_scroll_down_ru = InlineKeyboardButton(text="–°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ ‚¨áÔ∏è", callback_data="btn_scroll_down_ru")
btn_full_screen_ru = InlineKeyboardButton(text="–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω üñ•Ô∏è", callback_data="btn_full_screen_ru")
btn_set_volume_ru = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–≤—É–∫–∞üîä", callback_data="btn_volume_ru")
btn_set_brightness_ru = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏üí°", callback_data="btn_set_brightness_ru")
markup_main_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_shutdown_ru],
    [btn_restart_ru],
    [btn_sleep_ru],
    [btn_lock_ru],
    [btn_screenshot_ru],
    [btn_collapse_ru],
    [btn_scroll_up_ru, btn_scroll_down_ru],
    [btn_full_screen_ru],
    [btn_set_volume_ru],
    [btn_set_brightness_ru]
])


@dp.callback_query(F.data == 'btn_back_ru')
async def go_back_ru(call: CallbackQuery):
    if is_authorized(call.message):
        await cont_ru(call)
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The Shutdown button in Russian and the command "/shutdown"
@dp.callback_query(lambda call: call.data == 'btn_shutdown_ru')
@dp.message(Command("shutdown"))
async def shutdown_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö
            await message.answer("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö...")
            os.system("shutdown /s /t 1")
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Restart" button in Russian and the "/restart" command
@dp.callback_query(lambda call: call.data == 'btn_restart_ru')
@dp.message(Command("restart"))
async def restart_ru(event):
    message = event.message if isinstance(event, CallbackQuery) else event

    if is_authorized(message):
        try:
            await message.answer("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö...")

            os.system("shutdown /r /t 1")
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The Sleep button in Russian and the command "/sleep"
@dp.callback_query(lambda call: call.data == 'btn_sleep_ru')
@dp.message(Command("sleep"))
async def sleep_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            sleep_message = await message.reply("–ü–µ—Ä–µ–≤–æ–∂—É –ü–ö –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
            os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")

            await asyncio.sleep(30)
            await sleep_message.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Lock screen" button in Russian and the "/lock" command
@dp.callback_query(lambda call: call.data == 'btn_lock_ru')
@dp.message(Command("lock"))
async def lock_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞
            await message.answer("–≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            os.system("rundll32 user32.dll,LockWorkStation")
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫—Ä–∏–Ω—à–æ—Ç" –∏ –∫–æ–º–∞–Ω–¥—ã "/screenshot"
@dp.callback_query(lambda call: call.data == 'btn_screenshot_ru')
@dp.message(Command("screenshot"))
async def screenshot_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            with mss.mss() as sct:
                monitors = sct.monitors
                monitor_count = len(monitors) - 1

            if monitor_count == 1:
                monitor_index = 1
            else:
                monitor_list = "\n".join([f"{i}. –ú–æ–Ω–∏—Ç–æ—Ä {i}" for i in range(1, monitor_count + 1)])
                await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã:\n{monitor_list}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞:")

                monitor_index_msg = await bot.wait_for("message")
                try:
                    monitor_index = int(monitor_index_msg.text.strip())
                except ValueError:
                    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –û—Ç–º–µ–Ω–µ–Ω–æ.")
                    return

                if monitor_index < 1 or monitor_index > monitor_count:
                    await message.answer("–ù–æ–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –û—Ç–º–µ–Ω–µ–Ω–æ.")
                    return

            screenshot_path = f"screenshot_monitor_{monitor_index}.png"
            with mss.mss() as sct:
                monitor = sct.monitors[monitor_index]
                screenshot = sct.grab(monitor)
                mss.tools.to_png(screenshot.rgb, screenshot.size, output=screenshot_path)

            photo = FSInputFile(screenshot_path)
            await message.answer_photo(photo)

            os.remove(screenshot_path)
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Change language" button in Russian and the command "/switch_layout"
@dp.callback_query(lambda call: call.data == 'btn_switch_layout_ru')
@dp.message(Command("switch_layout"))
async def switch_layout_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            pyautogui.hotkey('win', 'space')

            layout = await message.reply("–†–∞—Å–∫–ª–∞–¥–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∞!")

            await asyncio.sleep(30)
            await layout.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Minimize windows" button in Russian and the "/collapse" command
@dp.callback_query(lambda call: call.data == 'btn_collapse_ru')
@dp.message(Command("collapse"))
async def collapse_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            collapse_msg = await message.reply("–û–∫–Ω–∞ —Å–≤–µ—Ä–Ω—É—Ç—ã")

            keyboard.press('win')
            keyboard.press('m')
            keyboard.release('m')
            keyboard.release('win')

            await asyncio.sleep(30)
            await collapse_msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Scroll up" button in Russian and the command "/scroll_up"
@dp.callback_query(lambda call: call.data == 'btn_scroll_up_ru')
@dp.message(Command("scroll_up"))
async def scroll_up_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            scroll = await message.reply("Scroll –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞–≤–µ—Ä—Ö")
            pyautogui.scroll(745)
            await asyncio.sleep(3)
            await scroll.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Scroll down" button in Russian and the "/scroll_down" command
@dp.callback_query(lambda call: call.data == 'btn_scroll_down_ru')
@dp.message(Command("scroll_down"))
async def scroll_down_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            scroll = await message.reply("Scroll –≤—ã–ø–æ–ª–Ω–µ–Ω –≤–Ω–∏–∑")
            pyautogui.scroll(-745)
            await asyncio.sleep(3)
            await scroll.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The Full screen button in Russian and the command "/full_screen"
@dp.callback_query(lambda call: call.data == 'btn_full_screen_ru')
@dp.message(Command("full_screen"))
async def full_screen_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            screen = await message.reply("–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω")

            pyautogui.hotkey('win', 'up')

            await asyncio.sleep(30)
            await screen.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


class VolumeBrightnessStates(StatesGroup):
    set_volume = State()
    set_brightness = State()

# The "Sound" button
@dp.callback_query(F.data == "btn_volume_ru")
async def ask_volume(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ç 0 –¥–æ 100:")
    await call.answer()
    await state.set_state(VolumeBrightnessStates.set_volume)


@dp.message(VolumeBrightnessStates.set_volume)
async def handle_volume_input(message: types.Message, state: FSMContext):
    try:
        volume = int(message.text)
        if 0 <= volume <= 100:
            set_volume_pycaw(volume)
            await message.reply(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {volume}%.")
        else:
            error_message = await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100.")
            await asyncio.sleep(10)
            await error_message.delete()
    except ValueError:
        error_message = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
        await asyncio.sleep(10)
        await error_message.delete()
    finally:
        await state.clear()


# Brightness button
@dp.callback_query(F.data == "btn_set_brightness_ru")
async def ask_brightness(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 100:")
    await call.answer()
    await state.set_state(VolumeBrightnessStates.set_brightness)


@dp.message(VolumeBrightnessStates.set_brightness)
async def handle_brightness_input(message: types.Message, state: FSMContext):
    try:
        brightness = int(message.text)
        if 0 <= brightness <= 100:
            set_brightness_windows(brightness)
            await message.reply(f"–Ø—Ä–∫–æ—Å—Ç—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {brightness}%.")
        else:
            error_message = await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100.")
            await asyncio.sleep(10)
            await error_message.delete()
    except ValueError:
        error_message = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
        await asyncio.sleep(10)
        await error_message.delete()
    finally:
        await state.clear()


def set_volume_pycaw(volume: int):
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume_interface = interface.QueryInterface(IAudioEndpointVolume)
        volume_interface.SetMasterVolumeLevelScalar(volume / 100.0, None)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")


# Function for setting brightness
def set_brightness_windows(brightness: int):
    subprocess.run(
        ["powershell", f"(Get-WmiObject -Namespace root/WMI -Class WmiMonitorBrightnessMethods).WmiSetBrightness(1,{brightness})"],
        shell=True,
    )



@dp.callback_query(lambda call: call.data == 'main_btn_ru')
async def main_btn_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:</b>\n
""", reply_markup=markup_btn_ru, parse_mode="HTML")


btn_back_ru = InlineKeyboardButton(text="Backüîô", callback_data="btn_back_ru")
btn_space_ru = InlineKeyboardButton(text="–ü—Ä–æ–±–µ–ª", callback_data="btn_space_ru")
btn_enter_ru = InlineKeyboardButton(text="Enter", callback_data="btn_enter_ru")
btn_esc_ru = InlineKeyboardButton(text="ESC", callback_data="btn_esc_ru")
btn_tab_ru = InlineKeyboardButton(text="TAB", callback_data="btn_tab_ru")
btn_del_ru = InlineKeyboardButton(text="DEL", callback_data="btn_del_ru")
btn_backspace_ru = InlineKeyboardButton(text="Backspace", callback_data="btn_backspace_ru")
btn_capslock_ru = InlineKeyboardButton(text=" CAPS Lock", callback_data="btn_capslock_ru")
btn_rmb_ru = InlineKeyboardButton(text="–ü–ö–ú", callback_data="btn_rmb_ru")
btn_lmb_ru = InlineKeyboardButton(text="–õ–ö–ú", callback_data="btn_lmb_ru")
btn_f_ru = InlineKeyboardButton(text="F1-F12", callback_data="btn_f_ru")
markup_btn_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_space_ru],
    [btn_enter_ru],
    [btn_esc_ru],
    [btn_tab_ru],
    [btn_del_ru],
    [btn_backspace_ru],
    [btn_capslock_ru],
    [btn_lmb_ru, btn_rmb_ru],
    [btn_f_ru]
])

# Back button in English
@dp.callback_query(F.data == 'btn_back_ru')
async def go_back_ru(call: CallbackQuery):
    if is_authorized(call.message):
        await cont_ru(call)
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


## The "–ü—Ä–æ–±–µ–ª" button in Russian and the "/space" command
@dp.callback_query(lambda call: call.data == 'btn_space_ru')
@dp.message(Command("space"))
async def space_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–±–µ–ª –Ω–∞–∂–∞—Ç–∞")
            pyautogui.press('space')

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Enter" button in Russian and the "/Enter" command
@dp.callback_query(lambda call: call.data == 'btn_enter_ru')
@dp.message(Command("enter"))
async def enter_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ enter –Ω–∞–∂–∞—Ç–∞")
            pyautogui.press('enter')

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "ESC" button in Russian and the "/esc" command
@dp.callback_query(lambda call: call.data == 'btn_esc_ru')
@dp.message(Command("esc"))
async def esc_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ ESC –Ω–∞–∂–∞—Ç–∞")
            pyautogui.press('esc')

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "TAB" button in Russian and the "/tab" command
@dp.callback_query(lambda call: call.data == 'btn_tab_ru')
@dp.message(Command("tab"))
async def tab_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ TAB –Ω–∞–∂–∞—Ç–∞")
            pyautogui.press('tab')

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "DEL" button in Russian and the "/del" command
@dp.callback_query(lambda call: call.data == 'btn_del_ru')
@dp.message(Command("del"))
async def del_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ DEL –Ω–∞–∂–∞—Ç–∞")
            pyautogui.press('delete')

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Backspace" button in Russian and the "/backspace" command
@dp.callback_query(lambda call: call.data == 'btn_backspace_ru')
@dp.message(Command("backspace"))
async def backspace_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ backspace –Ω–∞–∂–∞—Ç–∞")
            pyautogui.press('backspace')

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "CAPS Lock" button in Russian and the "/capslock" command
@dp.callback_query(lambda call: call.data == 'btn_capslock_ru')
@dp.message(Command("capslock"))
async def capslock_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ CAPS Lock –Ω–∞–∂–∞—Ç–∞")
            pyautogui.press('capslock')

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "–ü–ö–ú" button in Russian and the "/rmb" command
@dp.callback_query(lambda call: call.data == 'btn_rmb_ru')
@dp.message(Command("rmb"))
async def rmb_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ –ü–ö–ú –Ω–∞–∂–∞—Ç–∞")
            pyautogui.click(button="right")

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "–õ–ö–ú" button in Russian and the "/lmb" command
@dp.callback_query(lambda call: call.data == 'btn_lmb_ru')
@dp.message(Command("lmb"))
async def lmb_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            msg = await message.reply("–ö–Ω–æ–ø–∫–∞ –õ–ö–ú –Ω–∞–∂–∞—Ç–∞")
            pyautogui.click(button="left")

            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'btn_f_ru')
async def f_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>–ö–Ω–æ–ø–∫–∏ F:</b>\n
""", reply_markup=markup_f_ru, parse_mode="HTML")


btn_back_f_ru = InlineKeyboardButton(text="Backüîô", callback_data="btn_back_f_ru")
btn_f1_ru = InlineKeyboardButton(text="F1", callback_data="btn_f1_ru")
btn_f2_ru = InlineKeyboardButton(text="F2", callback_data="btn_f2_ru")
btn_f3_ru = InlineKeyboardButton(text="F3", callback_data="btn_f3_ru")
btn_f4_ru = InlineKeyboardButton(text="F4", callback_data="btn_F4_ru")
btn_f5_ru = InlineKeyboardButton(text="F5", callback_data="btn_f5_ru")
btn_f6_ru = InlineKeyboardButton(text="F6Ô∏è", callback_data="btn_f6_ru")
btn_f7_ru = InlineKeyboardButton(text="F7", callback_data="btn_f7_ru")
btn_f8_ru = InlineKeyboardButton(text="F8", callback_data="btn_f8_ru")
btn_f9_ru = InlineKeyboardButton(text="F9", callback_data="btn_f9_ru")
btn_f10_ru = InlineKeyboardButton(text="F10", callback_data="btn_f10_ru")
btn_f11_ru = InlineKeyboardButton(text="F11", callback_data="btn_f11_ru")
btn_f12_ru = InlineKeyboardButton(text="F12", callback_data="btn_f12_ru")
markup_f_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_f_ru],
    [btn_f1_ru, btn_f2_ru, btn_f3_ru],
    [btn_f4_ru, btn_f5_ru, btn_f6_ru],
    [btn_f7_ru, btn_f8_ru, btn_f9_ru],
    [btn_f10_ru, btn_f11_ru, btn_f12_ru],
    ])


# Back button in English
@dp.callback_query(F.data == 'btn_back_f_ru')
async def go_back_f_ru(call: CallbackQuery):
    if is_authorized(call.message):
        await main_btn_ru(call)
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")

# f1 button in Russian
@dp.callback_query(F.data == 'btn_f1_ru')
async def f1_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f1')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")

# f2 button in Russian
@dp.callback_query(F.data == 'btn_f2_ru')
async def f2_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f2')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")

# f3 button in Russian
@dp.callback_query(F.data == 'btn_f3_ru')
async def f3_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f3')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f4 button in Russian
@dp.callback_query(F.data == 'btn_f4_ru')
async def f4_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f4')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f5 button in Russian
@dp.callback_query(F.data == 'btn_f5_ru')
async def f5_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f5')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f6 button in Russian
@dp.callback_query(F.data == 'btn_f6_ru')
async def f6_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f6')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f7 button in Russian
@dp.callback_query(F.data == 'btn_f7_ru')
async def f7_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f7')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f8 button in Russian
@dp.callback_query(F.data == 'btn_f8_ru')
async def f8_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f8')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f9 button in Russian
@dp.callback_query(F.data == 'btn_f9_ru')
async def f9_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f9')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f10 button in Russian
@dp.callback_query(F.data == 'btn_f10_ru')
async def f10_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f10')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f11 button in Russian
@dp.callback_query(F.data == 'btn_f11_ru')
async def f11_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f11')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# f12 button in Russian
@dp.callback_query(F.data == 'btn_f12_ru')
async def f12_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f12')
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")



# APPLICATION COMMANDS IN ENGLISH
@dp.callback_query(lambda call: call.data == 'apps_commands_ru')
async def apps_commands_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>–ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:</b>\n
""", reply_markup=markup_app_ru, parse_mode="HTML")


btn_back_ru = InlineKeyboardButton(text="Backüîô", callback_data="btn_back_ru")
btn_telegram_ru = InlineKeyboardButton(text="Telegram‚úàÔ∏è", callback_data="btn_telegram_ru")
btn_chrome_ru = InlineKeyboardButton(text="Google Chromeüåêüîç", callback_data="btn_chrome_ru")
btn_opera_ru = InlineKeyboardButton(text="Operaüåç", callback_data="btn_opera_ru")
btn_edge_ru = InlineKeyboardButton(text="Microsoft Edgeüîç", callback_data="btn_edge_ru")
btn_firefox_ru = InlineKeyboardButton(text="Firefoxü¶äüåç", callback_data="btn_firefox_ru")
btn_yandex_ru = InlineKeyboardButton(text="–Ø–Ω–¥–µ–∫—Åüîé", callback_data="btn_yandex_ru")
btn_discord_ru = InlineKeyboardButton(text="Discordüí¨üéß", callback_data="btn_discord_ru")
btn_steam_ru = InlineKeyboardButton(text="SteamüéÆüî•", callback_data="btn_steam_ru")
btn_console_ru = InlineKeyboardButton(text="–ö–æ–Ω—Å–æ–ª—åüñ•Ô∏è", callback_data="btn_console_ru")
markup_app_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_telegram_ru],
    [btn_chrome_ru],
    [btn_opera_ru],
    [btn_edge_ru],
    [btn_firefox_ru],
    [btn_yandex_ru],
    [btn_discord_ru],
    [btn_steam_ru],
    [btn_console_ru]
])


# Back button in English
@dp.callback_query(F.data == 'btn_back_ru')
async def go_back_ru(call: CallbackQuery):
    if is_authorized(call.message):
        await cont_ru(call)
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–π–Ω!")


# The "Telegram" button in Russian and the "/telegram" command
@dp.callback_query(lambda call: call.data == 'btn_telegram_ru')
@dp.message(Command("telegram"))
async def telegram_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ Telegram", reply_markup=btn_exit_telegram_ru)
            pyautogui.press("win")
            time.sleep(1)
            keyboard.write("Telegram")
            time.sleep(1)
            pyautogui.press('enter')

            await asyncio.sleep(30)
            await app.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Google_chrome" button in Russian and the "/google_chrome" command
@dp.callback_query(lambda call: call.data == 'btn_chrome_ru')
@dp.message(Command("google_chrome"))
async def google_chrome_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ Google Chrome", reply_markup=btn_exit_chrome_ru)
            pyautogui.press("win")
            time.sleep(1)
            keyboard.write("Google Chrome")
            time.sleep(1)
            pyautogui.press('enter')

            await asyncio.sleep(30)
            await app.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Opera" button in Russian and the "/opera" command
@dp.callback_query(lambda call: call.data == 'btn_opera_ru')
@dp.message(Command("opera"))
async def opera_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ Opera", reply_markup=btn_exit_opera_ru)
            pyautogui.press("win")
            time.sleep(1)
            keyboard.write("Opera")
            time.sleep(1)
            pyautogui.press('enter')

            await asyncio.sleep(30)
            await app.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Edge" button in Russian and the "/edge" command
@dp.callback_query(lambda call: call.data == 'btn_edge_ru')
@dp.message(Command("edge"))
async def edge_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ Microsoft Edge", reply_markup=btn_exit_edge_ru)
            pyautogui.press("win")
            time.sleep(1)
            keyboard.write("Microsoft Edge")
            time.sleep(1)
            pyautogui.press('enter')

            await asyncio.sleep(30)
            await app.delete()

        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Firefox" button in Russian and the "/firefox" command
@dp.callback_query(lambda call: call.data == 'btn_firefox_ru')
@dp.message(Command("firefox"))
async def firefox_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ Firefox", reply_markup=btn_exit_firefox_ru)
            pyautogui.press("win")
            time.sleep(1)
            keyboard.write("Firefox")
            time.sleep(1)
            pyautogui.press('enter')

            await asyncio.sleep(30)
            await app.delete()

        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Firefox" button in Russian and the "/firefox" command
@dp.callback_query(lambda call: call.data == 'btn_yandex_ru')
@dp.message(Command("yandex"))
async def yandex_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ –Ø–Ω–¥–µ–∫—Å", reply_markup=btn_exit_yandex_ru)
            pyautogui.press("win")
            time.sleep(1)
            keyboard.write("–Ø–Ω–¥–µ–∫—Å")
            time.sleep(1)
            pyautogui.press('enter')

            await asyncio.sleep(30)
            await app.delete()

        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Discord" button in Russian and the "/discord" command
@dp.callback_query(lambda call: call.data == 'btn_discord_ru')
@dp.message(Command("discord"))
async def discord_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ Discord", reply_markup=btn_exit_discord_ru)
            pyautogui.press("win")
            time.sleep(1)
            keyboard.write("Discord")
            time.sleep(1)
            pyautogui.press('enter')

            await asyncio.sleep(30)
            await app.delete()

        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "steam" button in Russian and the "/steam" command
@dp.callback_query(lambda call: call.data == 'btn_steam_ru')
@dp.message(Command("steam"))
async def steam_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ Steam", reply_markup=btn_exit_steam_ru)
            pyautogui.press("win")
            time.sleep(1)
            keyboard.write("Steam")
            time.sleep(1)
            pyautogui.press('enter')

            await asyncio.sleep(30)
            await app.delete()

        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Console" button in Russian and the "/console" command
@dp.callback_query(lambda call: call.data == 'btn_console_ru')
@dp.message(Command("console"))
async def console_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            app = await message.reply("–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª–∏", reply_markup=btn_exit_console_ru)
            os.system("start cmd")

            await asyncio.sleep(30)
            await app.delete()

        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# Exit buttons from applications in English
btn_exit_telegram_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_telegram_ru")]
    ]
)
btn_exit_chrome_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_chrome_ru")]
    ]
)
btn_exit_opera_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_opera_ru")]
    ]
)
btn_exit_edge_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_edge_ru")]
    ]
)
btn_exit_firefox_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_firefox_ru")]
    ]
)
btn_exit_yandex_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_yandex_ru")]
    ]
)
btn_exit_discord_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_discord_ru")]
    ]
)
btn_exit_steam_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_steam_ru")]
    ]
)
btn_exit_console_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data="exit_console_ru")]
    ]
)


# Functions for closing applications in Russian
@dp.callback_query(lambda call: call.data == 'exit_telegram_ru')
async def exit_telegram_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM Telegram.exe /F")
            exit_message = await call.message.answer("Telegram –∑–∞–∫—Ä—ã—Ç")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'exit_chrome_ru')
async def exit_chrome_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM Chrome.exe /F")
            exit_message = await call.message.answer("Google Chrome –∑–∞–∫—Ä—ã—Ç")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")

    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'exit_opera_ru')
async def exit_opera_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM Opera.exe /F")
            exit_message = await call.message.answer("Opera –∑–∞–∫—Ä—ã—Ç–∞")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'exit_edge_ru')
async def exit_edge_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM msedge.exe /F")
            exit_message = await call.message.answer("Microsoft Edge –∑–∞–∫—Ä—ã—Ç")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'exit_firefox_ru')
async def exit_firefox_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM Firefox.exe /F")
            exit_message = await call.message.answer("Firefox –∑–∞–∫—Ä—ã—Ç")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'exit_discord_ru')
async def exit_discord_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM Discord.exe /F")
            exit_message = await call.message.answer("Discord –∑–∞—Ä–∫—ã—Ç")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'exit_yandex_ru')
async def exit_yandex_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM yandex.exe /F")
            exit_message = await call.message.answer("–Ø–Ω–¥–µ–∫—Å –∑–∞—Ä–∫—ã—Ç")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'exit_steam_ru')
async def exit_steam_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM Steam.exe /F")
            exit_message = await call.message.answer("Steam –∑–∞–∫—Ä—ã—Ç")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'exit_console_ru')
async def exit_console_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            os.system("taskkill /IM cmd.exe /F")
            exit_message = await call.message.answer("–ö–æ–Ω—Å–æ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
            await asyncio.sleep(10)
            await exit_message.delete()
        except Exception as e:
            await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")



# YOUTUBE in Russian
@dp.callback_query(lambda call: call.data == 'apps_youtube_ru')
async def youtube_commands_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>YouTube –∫–æ–º–∞–Ω–¥—ã:</b>\n
""", reply_markup=markup_youtube_ru, parse_mode="HTML")



btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
btn_play_ru = InlineKeyboardButton(text="–ü–∞—É–∑–∞ ‚è∏Ô∏è/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è", callback_data="btn_play_ru")
btn_next_ru = InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ ‚è≠Ô∏è", callback_data="btn_next_ru")
btn_full_video_ru = InlineKeyboardButton(text="–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–∏–¥–µ–æüìπ", callback_data="btn_full_video_ru")
btn_sub_ru = InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª —Å—É–±—Ç–∏—Ç—Ä—ãüî§", callback_data="btn_sub_ru")
btn_sounds_video_ru = InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –∑–≤—É–∫üîà", callback_data="btn_sounds_video_ru")
btn_mini_player_ru = InlineKeyboardButton(text="–ú–∏–Ω–∏-–ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—åüì∫", callback_data="btn_mini_player_ru")
btn_update_ru = InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É üîÑ", callback_data="btn_update_ru")
markup_youtube_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_play_ru],
    [btn_next_ru],
    [btn_full_video_ru],
    [btn_sub_ru],
    [btn_sounds_video_ru],
    [btn_mini_player_ru],
    [btn_update_ru]]
)


# Back button in Russian
@dp.callback_query(F.data == 'btn_back_ru')
async def go_back_ru(call: CallbackQuery):
    if is_authorized(call.message):
        await cont_ru(call)
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# pause button in Russian
@dp.callback_query(F.data == 'btn_play_ru')
async def play_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        pyautogui.press('space')
        await call.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# the next video button is in Russian
@dp.callback_query(F.data == 'btn_next_ru')
async def next_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('shift+n')
        await call.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == 'btn_full_video_ru')
async def full_video_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        VK_F = 0x46

        SendInput(VK_F, 0, 0, 0)
        SendInput(VK_F, 0, 2, 0)
        await call.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


@dp.callback_query(F.data == 'btn_sub_ru')
async def sub_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        VK_C = 0x43

        SendInput(VK_C, 0, 0, 0)
        SendInput(VK_C, 0, 2, 0)
        await call.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


@dp.callback_query(F.data == 'btn_sounds_video_ru')
async def sounds_video_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        VK_M = 0x4D

        SendInput(VK_M, 0, 0, 0)
        SendInput(VK_M, 0, 2, 0)
        await call.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


@dp.callback_query(F.data == 'btn_mini_player_ru')
async def mini_player_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        VK_I = 0x49

        SendInput(VK_I, 0, 0, 0)
        SendInput(VK_I, 0, 2, 0)
        await call.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# the next video button is in Russian
@dp.callback_query(F.data == 'btn_update_ru')
async def update_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        keyboard.send('f5')
        await call.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


# Sites in Russian
@dp.callback_query(lambda call: call.data == 'sait_commands_ru')
async def sait_commands_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>–ö–æ–º–∞–Ω–¥—ã —Å–∞–π—Ç–∞:</b>\n
""", reply_markup=markup_sait_ru, parse_mode="HTML")


btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥üîô", callback_data="btn_back_ru")
btn_chatgpt_ru = InlineKeyboardButton(text="Chat GPTü§ñ", callback_data="btn_chatgpt_ru")
btn_youtube_ru = InlineKeyboardButton(text="Youtube‚ñ∂Ô∏è", callback_data="btn_youtube_ru")
btn_vk_ru = InlineKeyboardButton(text="Vküåê", callback_data="btn_vk_ru")
btn_x_ru = InlineKeyboardButton(text="X‚ö°", callback_data="btn_x_ru")
btn_rutube_ru = InlineKeyboardButton(text="Rutubeüé¨", callback_data="btn_rutube_ru")
btn_binance_ru = InlineKeyboardButton(text="Binanceüí∞üìà", callback_data="btn_binance_ru")
btn_bybit_ru = InlineKeyboardButton(text="ByBitüíπüìä", callback_data="btn_bybit_ru")
btn_okx_ru = InlineKeyboardButton(text="OKXüîêüíµ", callback_data="btn_okx_ru")
btn_git_ru = InlineKeyboardButton(text="GitHubüíª", callback_data="btn_git_ru")
btn_gmail_ru = InlineKeyboardButton(text="Gmailüì©", callback_data="btn_gmail_ru")
btn_wiki_ru = InlineKeyboardButton(text="–í–∏–∫–∏–ø–µ–¥–∏–Øüîé", callback_data="btn_wiki_ru")
markup_sait_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_chatgpt_ru, btn_youtube_ru],
    [btn_vk_ru, btn_x_ru, btn_rutube_ru],
    [btn_binance_ru, btn_bybit_ru, btn_okx_ru],
    [btn_git_ru, btn_gmail_ru, btn_wiki_ru],
])


# Back button in Russian
@dp.callback_query(F.data == 'btn_back_ru')
async def go_back_ru(call: CallbackQuery):
    if is_authorized(call.message):
        await cont_ru(call)
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# ChatGPT button in Russian and the command "/chat_gpt"
@dp.callback_query(lambda call: call.data == 'btn_chatgpt_ru')
@dp.message(Command("chat_gpt"))
async def chatgpt_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            webbrowser.open("https://chatgpt.com")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ Chat GPT")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# YouTube button in Russian and the command "/youtube"
@dp.callback_query(lambda call: call.data == 'btn_youtube_ru')
@dp.message(Command("youtube"))
async def youtube_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            webbrowser.open("https://youtube.com")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ YouTube")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# vk button in Russian and the command "/vk"
@dp.callback_query(lambda call: call.data == 'btn_vk_ru')
@dp.message(Command("vk"))
async def vk_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            webbrowser.open("https://vk.com")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ VK")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The x button in Russian and the "/x" command
@dp.callback_query(lambda call: call.data == 'btn_x_ru')
@dp.message(Command("x"))
async def x_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            webbrowser.open("https://x.com")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ X")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The Rutube button in Russian and the command "/rutube"
@dp.callback_query(lambda call: call.data == 'btn_rutube_ru')
@dp.message(Command("rutube"))
async def rutube_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            webbrowser.open("https://rutube.ru")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ Rutube")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
       await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# Binance button in Russian and the command "/binance"
@dp.callback_query(lambda call: call.data == 'btn_binance_ru')
@dp.message(Command("binance"))
async def binance_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            webbrowser.open("https://www.binance.com/ru")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ Binance")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The ByBit button in Russian and the command "/bybit"
@dp.callback_query(lambda call: call.data == 'btn_bybit_ru')
@dp.message(Command("bybit"))
async def bybit_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            webbrowser.open("https://www.bybit.com/ru-RU/")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ ByBit")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# OKX button in Russian and the command "/okx"
@dp.callback_query(lambda call: call.data == 'btn_okx_ru')
@dp.message(Command("okx"))
async def okx_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            webbrowser.open("https://www.okx.com/ru")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ OKX")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The GitHub button in Russian and the command "/git_hub"
@dp.callback_query(lambda call: call.data == 'btn_git_ru')
@dp.message(Command("git_hub"))
async def git_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            webbrowser.open("https://github.com")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ GitHub")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# Gmail button in Russian and the command "/gmail"
@dp.callback_query(lambda call: call.data == 'btn_gmail_ru')
@dp.message(Command("gmail"))
async def wiki_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            webbrowser.open("https://gmail.com")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ Gmail")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# Wikipedia button in Russian and the command "/wikipedia"
@dp.callback_query(lambda call: call.data == 'btn_wiki_ru')
@dp.message(Command("wikipedia"))
async def wiki_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            webbrowser.open("https://ru.wikipedia.org/wiki/–ó–∞–≥–ª–∞–≤–Ω–∞—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            msg = await message.answer("–ó–∞–ø—É—Å–∫ –í–∏–∫–∏–ø–µ–¥–∏–Ø")
            await asyncio.sleep(15)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# information about the computer in Russian
@dp.callback_query(lambda call: call.data == 'my_computer_ru')
async def my_computer_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>–ö–æ–º–∞–Ω–¥—ã –æ –º–æ—ë–º –ü–ö:</b>\n
""", reply_markup=markup_my_computer_ru, parse_mode="HTML")


btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
btn_systeminfo_ru = InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µüíª", callback_data="btn_systeminfo_ru")
btn_power_info_ru = InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä—è–¥–µü™´", callback_data="btn_power_info_ru")
btn_ports_info_ru = InlineKeyboardButton(text="–ü–æ—Ä—Ç—ãüîì", callback_data="btn_ports_info_ru")
btn_disk_usage_ru = InlineKeyboardButton(text="–î–∏—Å–∫–∏ üíæ", callback_data="btn_disk_usage_ru")
btn_screen_expansion_ru = InlineKeyboardButton(text="–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ üì∫", callback_data="btn_screen_expansion_ru")
markup_my_computer_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_systeminfo_ru],
    [btn_power_info_ru],
    [btn_ports_info_ru],
    [btn_disk_usage_ru],
    [btn_screen_expansion_ru]
])


# Back button in English
@dp.callback_query(F.data == 'btn_back_ru')
async def go_back_ru(call: CallbackQuery):
    if is_authorized(call.message):
        await cont_ru(call)
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# Function for getting information about the processor for Windows
def get_cpu_brand_ru():
    try:
        result = subprocess.check_output("wmic cpu get name", shell=True).decode().strip()
        cpu_brand = result.split("\n")[1].strip()
    except Exception as e:
        cpu_brand = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {e}"
    return cpu_brand

# Function for getting information about the system
def get_system_info_ru():
    uname = platform.uname()
    boot_time = psutil.boot_time()
    boot_time_formatted = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(boot_time))
    cpu_brand = get_cpu_brand_ru()

    system_info_ru = (
        f"üñ•Ô∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ**\n"
        f"**–û–°:** {uname.system} {uname.release} (–í–µ—Ä—Å–∏—è: {uname.version})\n"
        f"**–ò–º—è:** {uname.node}\n"
        f"**–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:** {cpu_brand}\n"
        f"**–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:** {psutil.cpu_freq().max:.2f} –ú–ì—Ü\n"
        f"**–Ø–¥–µ—Ä –≤—Å–µ–≥–æ:** {psutil.cpu_count(logical=False)} | **–ü–æ—Ç–æ–∫–æ–≤:** {psutil.cpu_count(logical=True)}\n"
        f"**–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:** {boot_time_formatted}\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**\n"
        f"**–ó–∞–≥—Ä—É–∑–∫–∞ CPU:** {psutil.cpu_percent()}%\n"
        f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {psutil.virtual_memory().percent}%\n"
    )

    return system_info_ru


# Button handler for displaying system information
@dp.callback_query(lambda call: call.data == "btn_systeminfo_ru")
async def send_system_info_ru(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            info = get_system_info_ru()
            await call.message.reply(info, parse_mode="Markdown")
        except Exception as e:
            error = await call.message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {str(e)}")
            await asyncio.sleep(10)
            await error.delete()
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# Function for getting nutrition information
def get_power_info_ru():
    try:
        battery = psutil.sensors_battery()
        if battery:
            plugged = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏" if battery.power_plugged else "–†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –±–∞—Ç–∞—Ä–µ–∏"
            percent = battery.percent
            time_left = (
                f"{battery.secsleft // 3600}h {(battery.secsleft % 3600) // 60}m"
                if battery.secsleft != psutil.POWER_TIME_UNLIMITED
                else "–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è..."
            )
            power_info = (
                f"üîã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏**\n"
                f"**–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞:** {percent}%\n"
                f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {plugged}\n"
                f"**–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:** {time_left}\n"
            )
        else:
            power_info = "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ. –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π –ü–ö –±–µ–∑ –±–∞—Ç–∞—Ä–µ–∏?"

        return power_info
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏: {e}"


# Button handler for displaying power information
@dp.callback_query(lambda call: call.data == "btn_power_info_ru")
async def send_power_info_ru(call: CallbackQuery):
    if is_authorized(call.message):
        power_info = get_power_info_ru()
        await call.message.answer(power_info, parse_mode="Markdown")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")

# Function for getting information about ports
async def get_ports_info_ru(call: CallbackQuery):
    try:
        open_ports = []
        for conn in psutil.net_connections(kind='inet'):
            if conn.status == psutil.CONN_LISTEN:
                open_ports.append(conn.laddr.port)
        if not open_ports:
            ports_info = "üîí –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –í–∞—à –ü–ö –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
        else:
            ports_info = "üîì –ù–∞–π–¥–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:\n" + "\n".join([f"‚Ä¢ –ü–æ—Ä—Ç {port}" for port in open_ports])

        public_ip = requests.get("https://api.ipify.org").text
        shodan_response = requests.get(f"https://api.shodan.io/shodan/host/{public_ip}?key={SHODAN_API_KEY}")

        if shodan_response.status_code == 200:
            shodan_data = shodan_response.json()
            advice = "üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n" + "\n".join(
                [f"‚Ä¢ {item['port']} - {item['transport']} ({item['product']})" for item in shodan_data.get('data', [])]
            )
        else:
            advice = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ Shodan."

        await call.message.answer(f"{ports_info}\n\nüåç –í–∞—à –ø—É–±–ª–∏—á–Ω—ã–π IP: {public_ip}\n\n{advice}")
    except Exception as e:
        await call.message.answer(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# Button handler for getting information about ports
@dp.callback_query(lambda call: call.data == "btn_ports_info_ru")
async def handle_ports_info_ru(call: CallbackQuery):
    await get_ports_info_ru(call)


def get_disk_usage_ru():
    try:
        drives = [f"{partition.device}" for partition in psutil.disk_partitions()]
        usage_info = []

        for drive in drives:
            usage = psutil.disk_usage(drive)
            drive_letter = drive.rstrip(":\\")
            total = round(usage.total / (1024 ** 3), 2)
            used = round(usage.used / (1024 ** 3), 2)
            free = round(usage.free / (1024 ** 3), 2)
            percent = usage.percent

            usage_info.append(f"–î–∏—Å–∫ {drive_letter} :\n"
                              f"–í—Å–µ–≥–æ: {total} –ì–ë\n"
                              f"–ó–∞–Ω—è—Ç–æ: {used} –ì–ë ({percent}%)\n"
                              f"–°–≤–æ–±–æ–¥–Ω–æ: {free} –ì–ë\n")

        return "\n".join(usage_info)

    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏—Å–∫–µ: {str(e)}"

@dp.callback_query(lambda call: call.data == "btn_disk_usage_ru")
async def send_disk_usage_ru(call: CallbackQuery):
    try:
        disk_usage = get_disk_usage_ru()
        await call.message.reply(f"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ:\n\n{disk_usage}", parse_mode="Markdown")
    except Exception as e:
        error = await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await asyncio.sleep(10)
        await error.delete()


def get_screen_resolution():
    width, height = pyautogui.size()
    return width, height

@dp.callback_query(F.data == "btn_screen_expansion_ru")
async def send_screen_resolution(call: CallbackQuery):
    if is_authorized(call.message):
        try:
            width, height = get_screen_resolution()
            info = f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: **{width}x{height}**"
            await call.message.reply(info, parse_mode="Markdown")
        except Exception as e:
            await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await call.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")



@dp.callback_query(lambda call: call.data == 'clearing_ru')
async def clearing_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>–ö–æ–º–∞–Ω–¥—ã –ø–æ –æ—á–∏—Å—Ç–∫–µ:</b>\n
    """, reply_markup=markup_clearing_ru, parse_mode="HTML")


btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
btn_empty_trash_ru = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóëÔ∏è", callback_data="btn_empty_trash_ru")
btn_empty_temp_ru = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ %temp%üìÅ", callback_data="btn_empty_temp_ru")
btn_empty_ram_ru = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∫–∞ RAMüìÅ", callback_data="btn_empty_ram_ru")
btn_clear_startup_ru = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—ÉüöÄ", callback_data="btn_clear_startup_ru")
# btn_empty_all_msg_ru = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è üí¨", callback_data="btn_empty_all_msg_ru")
markup_clearing_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_empty_trash_ru],
    [btn_empty_temp_ru],
    [btn_empty_ram_ru],
    [btn_clear_startup_ru],
])


# The "Empty trash" button in Russian and the command "/empty_trash"
@dp.callback_query(lambda call: call.data == 'btn_empty_trash_ru')
@dp.message(Command("empty_trash"))
async def empty_trash_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:

            os.system('PowerShell -Command "Clear-RecycleBin -Force" >$null 2>&1')

            trash = await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")

            await asyncio.sleep(30)
            await trash.delete()
        except Exception as e:
            error_message = await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
            await asyncio.sleep(10)
            await error_message.delete()
    else:
        access_message = await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        await asyncio.sleep(10)
        await access_message.delete()


@dp.callback_query(F.data == "btn_empty_temp_ru")
async def clear_temp_folder_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        if os.path.exists(TEMP_FOLDER):
            for filename in os.listdir(TEMP_FOLDER):
                file_path = os.path.join(TEMP_FOLDER, filename)
                try:
                    if os.path.isfile(file_path) or os.path.islink(file_path):
                        os.unlink(file_path)
                    elif os.path.isdir(file_path):
                        shutil.rmtree(file_path)
                except Exception as e:
                    pass
            msg = await call.message.answer("–ü–∞–ø–∫–∞ %temp% —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
            await asyncio.sleep(25)
            await msg.delete()
        else:
            msg = await call.message.answer("–ü–∞–ø–∫–∞ %temp% –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞.")
            await asyncio.sleep(25)
            await msg.delete()
    except Exception as e:
        error = await call.message.answer(f"‚ö† –í–æ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(15)
        await error.delete()

    await call.answer()


# The "empty ram" button in Russian and the command "/empty_ram"
@dp.callback_query(lambda call: call.data == 'btn_empty_ram_ru')
@dp.message(Command("empty_ram"))
async def empty_ram_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            subprocess.run('powershell -Command "Clear-Content -Path memory://"', shell=True)
            msg = await message.answer("–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


# The "Clear startup" button in Russian and the command "/clear_startup"
@dp.callback_query(lambda call: call.data == 'btn_clear_startup_ru')
@dp.message(Command("clear_startup"))
async def clear_startup_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            registry_path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
            registry = winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER)
            registry_key = winreg.OpenKey(registry, registry_path, 0, winreg.KEY_WRITE)

            try:
                winreg.DeleteValue(registry_key, "SomeProgram")
            except FileNotFoundError:
                pass

            success_message = await message.answer("–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
            await asyncio.sleep(30)
            await success_message.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")



@dp.callback_query(lambda call: call.data == 'keyboard_control_ru')
async def keyboard_control_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("""<b>–ö–æ–º–∞–Ω–¥—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:</b>\n
""", reply_markup=markup_keyboard_control_ru, parse_mode="HTML")

btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
btn_write_text_ru = InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç ‚úçÔ∏è", callback_data="btn_write_text_ru")
btn_send_notification_ru = InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî", callback_data="btn_send_notification_ru")
markup_keyboard_control_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_write_text_ru],
    [btn_send_notification_ru]
])


class TextInputStates(StatesGroup):
    write_text = State()

# Button "Write Text"
@dp.callback_query(F.data == "btn_write_text_ru")
async def ask_text_input(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞ —Å–≤–æ–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:")
    await call.answer()
    await state.set_state(TextInputStates.write_text)

@dp.message(TextInputStates.write_text)
async def handle_text_input(message: types.Message, state: FSMContext):
    try:
        user_text = message.text

        keyboard.write(user_text)

        await message.reply(f"–¢–µ–∫—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω!")
    except Exception as e:
        await message.reply(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


class NotificationStates(StatesGroup):
    send_notification = State()

# Button "Send Notification"
@dp.callback_query(F.data == "btn_send_notification_ru")
async def ask_notification_text(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:")
    await call.answer()
    await state.set_state(NotificationStates.send_notification)

@dp.message(NotificationStates.send_notification)
async def handle_notification_input(message: types.Message, state: FSMContext):
    try:
        user_text = message.text

        show_windows_notification("smartPC | Lexium", user_text)

        await message.reply(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.")
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞: {str(e)}")
    finally:
        await state.clear()

def show_windows_notification(title: str, message: str):
    MessageBox = ctypes.windll.user32.MessageBoxW
    MessageBox(None, message, title, 0x40 | 0x1)



@dp.callback_query(lambda call: call.data == 'btn_browser_management')
async def browser_management_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer(f"""<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º:\n\nüåé –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä:</b> {browser}
""", reply_markup=markup_browser_management_ru, parse_mode="HTML")

btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
btn_search_browser_ru = InlineKeyboardButton(text="–ü–æ–∏—Å–∫ üîé", callback_data="btn_search_browser_ru")
btn_open_main_browser_ru = InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä üåê", callback_data="btn_open_main_browser_ru")
btn_close_browser_ru = InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä ‚ùå", callback_data="btn_close_browser_ru")
btn_open_new_tab_ru = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É üÜï", callback_data="btn_open_new_tab_ru")
btn_close_tab_ru = InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É ‚ùå", callback_data="btn_close_tab_ru")
btn_refresh_browser_ru = InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É üîÑ", callback_data="btn_refresh_browser_ru")
btn_open_incognito_ru = InlineKeyboardButton(text="–†–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ üëΩ", callback_data="btn_open_incognito_ru")
btn_browser_history_ru = InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ üìú", callback_data="btn_browser_history_ru")
markup_browser_management_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_search_browser_ru],
    [btn_open_main_browser_ru],
    [btn_close_browser_ru],
    [btn_open_new_tab_ru],
    [btn_close_tab_ru],
    [btn_refresh_browser_ru],
    [btn_open_incognito_ru],
    [btn_browser_history_ru]
])


class SearchState(StatesGroup):
    waiting_for_query = State()


@dp.callback_query(F.data == "btn_search_browser_ru")
@dp.message(Command("search_browser"))
async def ask_search_query(event: Union[types.Message, CallbackQuery], state: FSMContext):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    else:
        message = event

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    await state.set_state(SearchState.waiting_for_query)

@dp.message(SearchState.waiting_for_query)
async def handle_search_query(message: types.Message, state: FSMContext):
    try:
        if is_authorized(message):
            query = quote(message.text)
            search_url = f"https://yandex.ru/search/?text={query}"

            if browser == "Google Chrome":
                subprocess.Popen(["start", "chrome", search_url], shell=True)
            elif browser == "Edge":
                subprocess.Popen(["start", "msedge", search_url], shell=True)
            elif browser == "Firefox":
                subprocess.Popen(["firefox", search_url], shell=True)
            elif browser == "Opera":
                subprocess.Popen(["start", "opera", search_url], shell=True)
            elif browser == "Opera GX":
                subprocess.Popen(["start", "operagx", search_url], shell=True)
            elif browser == "Yandex":
                subprocess.Popen(["start", "yandex", search_url], shell=True)
            else:
                await message.answer(f"‚ö† –ë—Ä–∞—É–∑–µ—Ä '{browser}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                return

            success_message = await message.answer(
                f"üîç –ü–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ {browser} –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n<b>{message.text}</b>", parse_mode="HTML"
            )
            await asyncio.sleep(30)
            await success_message.delete()

        else:
            await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")

    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
    finally:
        await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
@dp.callback_query(lambda call: call.data == 'btn_open_main_browser_ru')
@dp.message(Command("open_main_browser"))
async def open_main_browser_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        global browser

        try:
            if browser.lower() == "google chrome":
                subprocess.Popen(["start", "chrome"], shell=True)
            elif browser.lower() == "edge":
                subprocess.Popen(["start", "msedge"], shell=True)
            elif browser.lower() == "firefox":
                subprocess.Popen(["start", "firefox"], shell=True)
            elif browser.lower() == "opera":
                subprocess.Popen(["start", "opera"], shell=True)
            elif browser.lower() == "opera gx":
                subprocess.Popen(["start", "operagx"], shell=True)
            elif browser.lower() == "yandex":
                subprocess.Popen(["start", "yandexbrowser"], shell=True)
            else:
                await message.answer(f"‚ùå –ë—Ä–∞—É–∑–µ—Ä '{browser}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                return

            success_message = await message.answer(f"üåç –ë—Ä–∞—É–∑–µ—Ä '{browser}' –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ!")
            await asyncio.sleep(30)
            await success_message.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'btn_close_browser_ru')
@dp.message(Command("close_browser"))
async def close_browser_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            browser_processes = ["chrome.exe", "msedge.exe", "firefox.exe", "opera.exe", "yandexbrowser.exe"]

            closed = []
            for process in psutil.process_iter(['pid', 'name']):
                try:
                    if process.info['name'] in browser_processes:
                        process.terminate()
                        closed.append(process.info['name'])
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue

            if closed:
                success_message = await message.answer(
                    f"–ó–∞–∫—Ä—ã—Ç—ã –±—Ä–∞—É–∑–µ—Ä—ã: {', '.join(set(closed))}."
                )
            else:
                success_message = await message.answer("–ë—Ä–∞—É–∑–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")

            await asyncio.sleep(30)
            await success_message.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'btn_open_new_tab_ru')
@dp.message(Command("open_new_tab"))
async def open_new_tab_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            keyboard.send('ctrl+t')

            success_message = await message.answer("–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!")
            await asyncio.sleep(30)
            await success_message.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'btn_close_tab_ru')
@dp.message(Command("close_tab"))
async def close_tab_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            keyboard.send('ctrl+w')
            msg = await message.answer(f"–ó–∞–∫—Ä—ã—Ç–∞ –æ–¥–Ω–∞ –≤–∫–ª–∞–¥–∫–∞")

            await asyncio.sleep(30)
            await msg.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'btn_refresh_browser_ru')
@dp.message(Command("refresh_browser"))
async def refresh_browser(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            keyboard.send('f5')

            success_message = await message.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await asyncio.sleep(30)
            await success_message.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'btn_open_incognito_ru')
@dp.message(Command("open_incognito"))
async def open_incognito(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            if browser == "Google Chrome":
                subprocess.Popen(["start", "chrome", "--incognito"], shell=True)
            elif browser == "Edge":
                subprocess.Popen(["start", "msedge", "--inprivate"], shell=True)
            elif browser == "Firefox":
                subprocess.Popen(["firefox", "-private"], shell=True)
            elif browser == "Opera":
                subprocess.Popen(["start", "opera", "--private"], shell=True)
            elif browser == "Opera GX":
                subprocess.Popen(["start", "operagx", "--private"], shell=True)
            elif browser == "Yandex":
                subprocess.Popen(["start", "yandex", "--incognito"], shell=True)
            else:
                await message.answer(f"–ë—Ä–∞—É–∑–µ—Ä '{browser}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                return

            success_message = await message.answer(f"–û—Ç–∫—Ä—ã—Ç —Ä–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ {browser}!")
            await asyncio.sleep(30)
            await success_message.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–∂–∏–º–∞ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


BROWSER_HISTORY_PATHS = {
    "google chrome": os.path.expanduser("~") + r"\AppData\Local\Google\Chrome\User Data\Default\History",
    "edge": os.path.expanduser("~") + r"\AppData\Local\Microsoft\Edge\User Data\Default\History",
    "firefox": os.path.expanduser("~") + r"\AppData\Roaming\Mozilla\Firefox\Profiles",
    "yandex": os.path.expanduser("~") + r"\AppData\Local\Yandex\YandexBrowser\User Data\Default\History",
    "opera": os.path.expanduser("~") + r"\AppData\Roaming\Opera Software\Opera Stable\History",
    "opera gx": os.path.expanduser("~") + r"\AppData\Roaming\Opera Software\Opera GX Stable\History"
}


def get_browser_history(browser_name, limit=10):
    browser_name = browser_name.lower()

    if browser_name not in BROWSER_HISTORY_PATHS:
        return f"‚ùå –ë—Ä–∞—É–∑–µ—Ä '{browser_name}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."

    history_path = BROWSER_HISTORY_PATHS[browser_name]

    if not os.path.exists(history_path):
        return f"üìõ –ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ '{browser_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    try:
        temp_path = history_path + "_copy"
        shutil.copy2(history_path, temp_path)

        conn = sqlite3.connect(temp_path)
        cursor = conn.cursor()

        cursor.execute("SELECT url, title, last_visit_time FROM urls ORDER BY last_visit_time DESC LIMIT ?", (limit,))
        history = cursor.fetchall()

        conn.close()
        os.remove(temp_path)

        if not history:
            return f"üìÇ –ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ '{browser_name}' –ø—É—Å—Ç–∞."

        response = f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ ({browser_name}):</b>\n\n"
        for url, title, _ in history:
            response += f"üîπ <b>{title}</b>\n{url}\n\n"

        return response
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"


@dp.callback_query(lambda call: call.data == 'btn_browser_history_ru')
@dp.message(Command("browser_history"))
async def get_browser_history_command(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        global browser

        if not browser:
            await message.answer("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'browser' –Ω–µ –∑–∞–¥–∞–Ω–∞.")
            return

        history_result = get_browser_history(browser)

        await message.answer(history_result, parse_mode="HTML")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


@dp.callback_query(lambda call: call.data == 'files_ru')
async def files_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer(f"""<b>–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n\n<b>–î–∏—Å–∫:</b> {disk_path}
""", reply_markup=markup_files_ru, parse_mode="HTML")

btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
btn_open_explorer_ru = InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ üñ•Ô∏è", callback_data="btn_open_explorer_ru")
btn_create_folder_ru = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É üìÅ", callback_data="btn_create_folder_ru")
btn_create_file_txt_ru = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .txt üìù", callback_data="btn_create_file_txt_ru")
btn_create_docx_file_ru = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .docx üìÑ", callback_data="btn_create_docx_file_ru")
btn_upload_file_ru = InlineKeyboardButton(text="–°–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª üì§", callback_data="btn_upload_file_ru")
markup_files_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_open_explorer_ru],
    [btn_create_folder_ru],
    [btn_create_file_txt_ru],
    [btn_create_docx_file_ru],
    [btn_upload_file_ru]
])


@dp.callback_query(lambda call: call.data == 'btn_open_explorer_ru')
@dp.message(Command("open_explorer"))
async def open_explorer_ru(event):
    if isinstance(event, CallbackQuery):
        message = event.message
        await event.answer()
    elif isinstance(event, Message):
        message = event

    if is_authorized(message):
        try:
            os.system('explorer.exe')

            success_message = await message.answer("–ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ!")
            await asyncio.sleep(30)
            await success_message.delete()
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞: {str(e)}")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")


class FolderCreationStates(StatesGroup):
    create_folder = State()

@dp.callback_query(F.data == "btn_create_folder_ru")
async def ask_folder_name(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:")
    await call.answer()
    await state.set_state(FolderCreationStates.create_folder)

@dp.message(FolderCreationStates.create_folder)
async def handle_folder_creation(message: types.Message, state: FSMContext):
    folder_name = message.text.strip()

    full_path = os.path.join(disk_path, folder_name)

    try:
        if not os.path.exists(full_path):
            os.makedirs(full_path)
            await message.reply(f"üìÇ –ü–∞–ø–∫–∞ '{folder_name}' –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {disk_path}.")
        else:
            await message.reply(f"‚ö† –ü–∞–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º '{folder_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ {disk_path}.")
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


class FileCreationStates_txt(StatesGroup):
    create_file_txt = State()

# Button "Create File"
@dp.callback_query(F.data == "btn_create_file_txt_ru")
async def ask_file_name(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:")
    await call.answer()
    await state.set_state(FileCreationStates_txt.create_file_txt)

@dp.message(FileCreationStates_txt.create_file_txt)
async def handle_file_creation(message: types.Message, state: FSMContext):
    file_name = message.text.strip()
    if not file_name.endswith(".txt"):
        file_name += ".txt"


    full_path = os.path.join(disk_path, file_name)

    try:
        if not os.path.exists(full_path):
            with open(full_path, 'x') as file:
                file.write("")
            await message.reply(f"–§–∞–π–ª '{file_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ {disk_path}.")
        else:
            await message.reply(f"–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º '{file_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ {disk_path}.")
    except FileExistsError:
        await message.reply(f"–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º '{file_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ {disk_path}.")
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


class FileCreationStates(StatesGroup):
    create_docx_file = State()

# Button "Create .docx File"
@dp.callback_query(F.data == "btn_create_docx_file_ru")
async def ask_docx_file_name(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:")
    await call.answer()
    await state.set_state(FileCreationStates.create_docx_file)

@dp.message(FileCreationStates.create_docx_file)
async def handle_docx_file_creation(message: types.Message, state: FSMContext):
    try:
        file_name = message.text.strip()
        if not file_name.endswith(".docx"):
            file_name += ".docx"

        full_path = os.path.join(disk_path, file_name)

        if not os.path.exists(full_path):
            with open(full_path, 'w') as file:
                file.write("")
            await message.reply(f"–§–∞–π–ª '{file_name}'–±—ã–ª —É—Å–ø–µ—à"
                                f"–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ {disk_path}.")
        else:
            await message.reply(f"–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º '{file_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ {disk_path}.")
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


class FileUploadStates(StatesGroup):
    upload_file = State()

@dp.callback_query(F.data == "btn_upload_file_ru")
async def ask_for_file(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üìÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä.")
    await call.answer()
    await state.set_state(FileUploadStates.upload_file)

@dp.message(FileUploadStates.upload_file)
async def handle_uploaded_file(message: types.Message, state: FSMContext):
    try:
        file_id = None
        file_name = "unknown_file"

        if message.document:
            file_id = message.document.file_id
            file_name = message.document.file_name
        elif message.photo:
            file_id = message.photo[-1].file_id
            file_name = f"photo_{message.photo[-1].file_unique_id}.jpg"
        elif message.audio:
            file_id = message.audio.file_id
            file_name = message.audio.file_name
        elif message.voice:
            file_id = message.voice.file_id
            file_name = f"voice_{message.voice.file_unique_id}.ogg"
        elif message.video:
            file_id = message.video.file_id
            file_name = message.video.file_name
        elif message.video_note:
            file_id = message.video_note.file_id
            file_name = f"video_note_{message.video_note.file_unique_id}.mp4"

        if not file_id:
            await message.reply("‚ö† –≠—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        file = await bot.get_file(file_id)
        file_path = file.file_path
        save_path = os.path.join(disk_path, file_name)

        await bot.download_file(file_path, save_path)

        await message.reply(f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {disk_path}!")
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        await state.clear()


# Pro functions in English
@dp.callback_query(lambda call: call.data == 'pro_func_ru')
async def pro_func_ru(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("<b>Pro —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n", reply_markup=markup_pro_func_ru, parse_mode="HTML")


btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
btn_webcam_shot_ru = InlineKeyboardButton(text="–°–Ω–∏–º–æ–∫ —Å –≤–µ–±–∫–∏ üì∏", callback_data="btn_webcam_shot_ru")
btn_webcam_record_ru = InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –≤–µ–±–∫–∏ üìπ", callback_data="btn_webcam_record_ru")
btn_audio_record_ru = InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞ üîä", callback_data="btn_audio_record_ru")
btn_clipboard_text_ru = InlineKeyboardButton(text="–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ üî§", callback_data="btn_clipboard_text_ru")
btn_active_window_screenshot_ru = InlineKeyboardButton(text="–°–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ üñº", callback_data="btn_active_window_screenshot_ru")
btn_secret_mode_ru = InlineKeyboardButton(text="–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º üîê", callback_data="btn_secret_mode_ru")
markup_pro_func_ru = InlineKeyboardMarkup(inline_keyboard=[
    [btn_back_ru],
    [btn_webcam_shot_ru],
    [btn_webcam_record_ru],
    [btn_audio_record_ru],
    [btn_clipboard_text_ru],
    [btn_active_window_screenshot_ru],
    [btn_secret_mode_ru]
])


@dp.callback_query(F.data == 'btn_webcam_shot_ru')
async def webcam_shot_ru(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        cam = cv2.VideoCapture(0)
        if not cam.isOpened():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")

        ret, frame = cam.read()
        cam.release()
        if not ret:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã.")

        image_path = "webcam_shot.jpg"
        cv2.imwrite(image_path, frame)

        photo = FSInputFile(image_path)
        await call.message.answer_photo(photo, caption="–í–æ—Ç —Å–Ω–∏–º–æ–∫ —Å –≤–∞—à–µ–π –≤–µ–±-–∫–∞–º–µ—Ä—ã! üì∏")
        os.remove(image_path)
    except Exception as e:
        await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


awaiting_input_type = None

@dp.callback_query(F.data == 'btn_webcam_record_ru')
async def webcam_record_request(call: CallbackQuery):
    global awaiting_input_type
    if not is_authorized(call.message):
        await call.message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    awaiting_input_type = "video"
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1-60):")

@dp.callback_query(F.data == 'btn_audio_record_ru')
async def audio_record_request(call: CallbackQuery):
    global awaiting_input_type
    if not is_authorized(call.message):
        await call.message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    awaiting_input_type = "audio"
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1-60):")

@dp.message()
async def process_duration_input(message: Message):
    global awaiting_input_type
    if not awaiting_input_type:
        return

    try:
        duration = int(message.text)
        if duration < 1 or duration > 60:
            raise ValueError("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

        if awaiting_input_type == "video":
            await record_video(message, duration)
        elif awaiting_input_type == "audio":
            await record_audio(message, duration)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60.")
    except Exception as e:
        error = await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(10)
        await error.delete()
    finally:
        awaiting_input_type = None

async def record_video(message: Message, duration: int):
    try:
        video_path = "webcam_recording.avi"
        cam = cv2.VideoCapture(0)
        if not cam.isOpened():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ.")

        frame_width = int(cam.get(3))
        frame_height = int(cam.get(4))
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        out = cv2.VideoWriter(video_path, fourcc, 20.0, (frame_width, frame_height))

        await message.answer(f"–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ –¥–ª—è {duration} —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        for _ in range(duration * 20):
            ret, frame = cam.read()
            if not ret:
                break
            out.write(frame)

        cam.release()
        out.release()

        video = FSInputFile(video_path)
        await message.answer_video(video, caption="–í–æ—Ç –≤–∞—à–∞ –∑–∞–ø–∏—Å—å! üé•")
        os.remove(video_path)
    except Exception as e:
        raise e

async def record_audio(message: Message, duration: int):
    try:
        audio_path = "audio_recording.wav"
        sample_rate = 44100
        channels = 2

        await message.answer(f"–ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        audio_data = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=channels, dtype='int16')
        sd.wait()

        with wave.open(audio_path, 'wb') as wf:
            wf.setnchannels(channels)
            wf.setsampwidth(2)
            wf.setframerate(sample_rate)
            wf.writeframes(audio_data.tobytes())

        audio = FSInputFile(audio_path)
        await message.answer_voice(audio, caption="–í–æ—Ç –≤–∞—à–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω–∞—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å! üéôÔ∏è")
        os.remove(audio_path)
    except Exception as e:
        raise e


@dp.callback_query(F.data == 'btn_active_window_screenshot_ru')
async def screenshot_active_window(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        active_window = gw.getActiveWindow()
        if not active_window:
            await call.message.reply("–ê–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ.")
            return

        left, top, width, height = active_window.left, active_window.top, active_window.width, active_window.height

        screenshot_path = "active_window_screenshot.png"
        with mss.mss() as sct:
            region = {"top": top, "left": left, "width": width, "height": height}
            sct_img = sct.grab(region)
            mss.tools.to_png(sct_img.rgb, sct_img.size, output=screenshot_path)

        photo = FSInputFile(screenshot_path)
        await call.message.answer_photo(photo, caption="–í–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞! üñºÔ∏è")

        os.remove(screenshot_path)

    except Exception as e:
        await call.message.reply(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


def create_virtual_desktop():
    user32 = ctypes.windll.user32
    user32.keybd_event(0x11, 0, 0, 0)  # –ù–∞–∂–∏–º–∞–µ–º Ctrl
    user32.keybd_event(0x5B, 0, 0, 0)  # –ù–∞–∂–∏–º–∞–µ–º Win
    user32.keybd_event(0x44, 0, 0, 0)  # –ù–∞–∂–∏–º–∞–µ–º D (Win + Ctrl + D)
    user32.keybd_event(0x44, 0, 2, 0)  # –û—Ç–ø—É—Å–∫–∞–µ–º D
    user32.keybd_event(0x5B, 0, 2, 0)  # –û—Ç–ø—É—Å–∫–∞–µ–º Win
    user32.keybd_event(0x11, 0, 2, 0)  # –û—Ç–ø—É—Å–∫–∞–µ–º Ctrl


@dp.callback_query(F.data == 'btn_secret_mode_ru')
async def secret_mode_en(call: CallbackQuery):
    if not is_authorized(call.message):
        await call.message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        await call.message.answer("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª...")
        create_virtual_desktop()

        await call.message.answer("–ü—Ä–∏–≥–ª—É—à–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        set_volume_pycaw(0)

        await call.message.answer("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º! üîí –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª.")

    except Exception as e:
        error = await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(10)
        await error.delete()


@dp.callback_query(F.data == 'btn_clipboard_text_ru')
async def send_clipboard_text(call: CallbackQuery):
    try:
        if not is_authorized(call.message):
            await call.message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
            return

        clipboard_text = pyperclip.paste()

        if not clipboard_text:
            await call.message.answer("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç! üìù")
        else:
            await call.message.answer(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:\n\n{clipboard_text}")

    except Exception as e:
        error = await call.message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(10)
        await error.delete()


def apply_dnd_mode(enabled):
    if enabled:
        os.system('powershell.exe -Command "New-ItemProperty -Path HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Notifications\\Settings -Name NOC_GLOBAL_SETTING_TOASTS_ENABLED -Value 0 -PropertyType DWORD -Force | Out-Null"')
    else:
        os.system('powershell.exe -Command "Remove-ItemProperty -Path HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Notifications\\Settings -Name NOC_GLOBAL_SETTING_TOASTS_ENABLED -ErrorAction SilentlyContinue | Out-Null"')



def create_personal_account_markup_ru(dnd_enabled: bool):
#    dnd_button_text = "–í—ã–∫–ª '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å' ‚ùå" if dnd_enabled else "–í–∫–ª '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å' ‚úÖ"
    dnd_callback_data = 'btn_disable_dnd_ru' if dnd_enabled else 'btn_enable_dnd_ru'

    btn_back_ru = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="btn_back_ru")
    edit_favorites_ru = InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è", callback_data='edit_favorites')
    change_disk_button = InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫ üíæ", callback_data="change_disk")
    main_browser_button = InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä üåê", callback_data="select_main_browser")

    return InlineKeyboardMarkup(inline_keyboard=[
        [btn_back_ru],
#        [InlineKeyboardButton(text=dnd_button_text, callback_data=dnd_callback_data)],
        [change_disk_button],
        [main_browser_button],
        [edit_favorites_ru],
    ])


def create_browser_selection_markup():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Google Chrome üåê", callback_data="set_browser_chrome")],
        [InlineKeyboardButton(text="Edge üîç", callback_data="set_browser_edge")],
        [InlineKeyboardButton(text="Firefox ü¶ä", callback_data="set_browser_firefox")],
        [InlineKeyboardButton(text="Opera üåç", callback_data="set_browser_opera")],
        [InlineKeyboardButton(text="Opera GX üí¨", callback_data="set_browser_opera_gx")],
    ])


@dp.callback_query(lambda call: call.data == 'personal_account_ru')
async def personal_account_ru(call: types.CallbackQuery):
    await call.message.delete()
    global do_not_disturb_enabled, browser
    username = call.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    user_id = call.from_user.id

#    dnd_status = "–≤–∫–ª‚úÖ" if do_not_disturb_enabled else "–≤—ã–∫–ª‚ùå"

    text = f"""
üë§ –õ–ò–ß–ù–´–ô –ê–ö–ö–ê–£–ù–¢ ‚Äî {username} :

üåç –Ø–∑—ã–∫: üá∑üá∫

üìÅ –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–∫: {disk_path}

üåê –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä: {browser}

üõ†Ô∏è –í–µ—Ä—Å–∏—è: Pro v1.1 

üÜî –í–∞—à ID: {user_id}
    """

    message = await call.message.answer(text, reply_markup=create_personal_account_markup_ru(do_not_disturb_enabled))
    user_data[call.from_user.id] = {"message_id": message.message_id}


@dp.callback_query(lambda call: call.data == 'select_main_browser')
async def select_main_browser(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä:", reply_markup=create_browser_selection_markup())


@dp.callback_query(lambda call: call.data.startswith("set_browser_"))
async def set_browser(call: types.CallbackQuery):
    global browser
    browser_map = {
        "set_browser_chrome": "Google Chrome",
        "set_browser_edge": "Edge",
        "set_browser_firefox": "Firefox",
        "set_browser_opera": "Opera",
        "set_browser_opera_gx": "Opera GX"
    }

    browser = browser_map.get(call.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä")

    settings = load_settings()
    settings["browser"] = browser

    save_settings(settings)

    await call.answer(f"–û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {browser}!")
    await personal_account_ru(call)


@dp.callback_query(lambda call: call.data == 'btn_enable_dnd_ru')
async def enable_dnd(call: types.CallbackQuery):
    global do_not_disturb_enabled
    do_not_disturb_enabled = True
    apply_dnd_mode(do_not_disturb_enabled)

    settings = load_settings()
    settings["do_not_disturb_enabled"] = do_not_disturb_enabled
    save_settings(settings)

    await personal_account_ru(call)


@dp.callback_query(lambda call: call.data == 'btn_disable_dnd_ru')
async def disable_dnd(call: types.CallbackQuery):
    global do_not_disturb_enabled
    do_not_disturb_enabled = False
    apply_dnd_mode(do_not_disturb_enabled)

    settings = load_settings()
    settings["do_not_disturb_enabled"] = do_not_disturb_enabled
    save_settings(settings)

    await personal_account_ru(call)


FAVOURITES_FILE = "user_favourites.json"

def load_favourites():
    if os.path.exists(FAVOURITES_FILE):
        with open(FAVOURITES_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_favourites():
    with open(FAVOURITES_FILE, 'w') as f:
        json.dump(user_favourites, f)

user_favourites = load_favourites()

available_functions = {
    'btn_shutdown_ru': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ‚úÖ',
    'btn_restart_ru': '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ üîÑ',
    'btn_sleep_ru': '–°–ø—è—â–∏–π —Ä–µ–∂–∏–º üò¥',
    'btn_lock_ru': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω üîí',
    'btn_screenshot_ru': '–°–∫—Ä–∏–Ω—à–æ—Ç üì∏',
    'btn_switch_layout_ru': '–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê',
    'btn_collapse_ru': '–°–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–∞ üñ•',
    'btn_scroll_up_ru': '–°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö ‚¨ÜÔ∏è',
    'btn_scroll_down_ru': '–°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ ‚¨áÔ∏è',
    'btn_full_screen_ru': '–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω üñ•',
    'btn_volume_ru': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–≤—É–∫–∞ üîä',
    'btn_set_brightness_ru': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ üí°',
    'btn_back_ru': 'Back üîô',
    'btn_space_ru': '–ü—Ä–æ–±–µ–ª',
    'btn_enter_ru': 'Enter',
    'btn_esc_ru': 'ESC',
    'btn_tab_ru': 'TAB',
    'btn_del_ru': 'DEL',
    'btn_backspace_ru': 'Backspace',
    'btn_capslock_ru': 'CAPS Lock',
    'btn_rmb_ru': '–ü–ö–ú',
    'btn_lmb_ru': '–õ–ö–ú',
    'btn_telegram_ru': 'Telegram ‚úàÔ∏è',
    'btn_chrome_ru': 'Google Chrome üåê',
    'btn_opera_ru': 'Opera üåç',
    'btn_edge_ru': 'Microsoft Edge üîç',
    'btn_firefox_ru': 'Firefox ü¶ä',
    'btn_yandex_ru': '–Ø–Ω–¥–µ–∫—Å üîé',
    'btn_discord_ru': 'Discord üí¨',
    'btn_steam_ru': 'Steam üéÆ',
    'btn_console_ru': '–ö–æ–Ω—Å–æ–ª—å üñ•',
    'btn_play_ru': '–ü–∞—É–∑–∞ / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è',
    'btn_next_ru': '–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ ‚è≠Ô∏è',
    'btn_full_video_ru': '–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–∏–¥–µ–æ üìπ',
    'btn_sub_ru': '–í–∫–ª/–≤—ã–∫–ª —Å—É–±—Ç–∏—Ç—Ä—ã üî§',
    'btn_sounds_video_ru': '–í–∫–ª/–≤—ã–∫–ª –∑–≤—É–∫ üîà',
    'btn_mini_player_ru': '–ú–∏–Ω–∏-–ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å üì∫',
    'btn_update_ru': '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É üîÑ',
    'btn_chatgpt_ru': 'ChatGPT ü§ñ',
    'btn_youtube_ru': 'YouTube ‚ñ∂Ô∏è',
    'btn_vk_ru': 'VK üåê',
    'btn_x_ru': 'X ‚ö°Ô∏è',
    'btn_rutube_ru': 'Rutube üé¨',
    'btn_binance_ru': 'Binance üí∞',
    'btn_bybit_ru': 'ByBit üíπ',
    'btn_okx_ru': 'OKX üîê',
    'btn_git_ru': 'GitHub üíª',
    'btn_gmail_ru': 'Gmail üì©',
    'btn_wiki_ru': '–í–∏–∫–∏–ø–µ–¥–∏—è üîé',
    'btn_systeminfo_ru': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ üíª',
    'btn_power_info_ru': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä—è–¥–µ üîã',
    'btn_ports_info_ru': '–ü–æ—Ä—Ç—ã üîì',
    'btn_disk_usage_ru': '–î–∏—Å–∫–∏ C –∏ D üíæ',
    'btn_screen_expansion_ru': '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ üì∫',
    'btn_empty_trash_ru': '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóë',
    'btn_empty_temp_ru': '–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ %temp% üìÅ',
    'btn_empty_ram_ru': '–û—á–∏—Å—Ç–∫–∞ RAM üìÅ',
    'btn_clear_startup_ru': '–û—á–∏—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É üöÄ',
    'btn_write_text_ru': '–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç ‚úçÔ∏è',
    'btn_send_notification_ru': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî',
    'btn_open_main_browser_ru': '–û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä üåê',
    'btn_close_browser_ru': '–ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä ‚ùå',
    'btn_open_new_tab_ru': '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É ‚ûï',
    'btn_close_tab_ru': '–ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É ‚ùå',
    'btn_open_incognito_ru': '–†–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ üïµÔ∏è',
    'btn_open_explorer_ru': '–û—Ç–∫—Ä—ã—Ç—å –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ üìÇ',
    'btn_create_folder_ru': '–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É üìÅ',
    'btn_create_file_txt_ru': '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .txt üìù',
    'btn_create_docx_file_ru': '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .docx üìÑ',
    'btn_webcam_shot_ru': '–°–Ω–∏–º–æ–∫ —Å –≤–µ–±–∫–∏ üì∏',
    'btn_webcam_record_ru': '–ó–∞–ø–∏—Å—å –≤–µ–±–∫–∏ üé•',
    'btn_audio_record_ru': '–ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞ üé§',
    'btn_clipboard_text_ru': '–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ üìã',
    'btn_active_window_screenshot_ru': '–°–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ üñº',
    'btn_secret_mode_ru': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º üîí',
}


@dp.callback_query(lambda call: call.data == 'favourites_ru')
async def favourites_ru(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    favourites = user_favourites.get(user_id, [])
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=available_functions[func_key], callback_data=func_key)]
        for func_key in favourites
    ])
    markup.inline_keyboard.append([btn_back_ru])

    await call.message.delete()
    await call.message.answer("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=markup)


@dp.callback_query(lambda call: call.data == 'edit_favorites')
async def edit_favorites_handler(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    markup = generate_favourites_markup(user_id)
    await call.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:</b>",
    reply_markup=markup, parse_mode="HTML")

def generate_favourites_markup(user_id):
    favourites = user_favourites.get(user_id, [])
    markup = InlineKeyboardMarkup(inline_keyboard=[])

    for func_key, func_name in available_functions.items():
        if func_key in favourites:
            markup.inline_keyboard.append(
                [InlineKeyboardButton(text=f"{func_name} ‚úÖ", callback_data=f'remove_{func_key}')]
            )
        else:
            markup.inline_keyboard.append(
                [InlineKeyboardButton(text=f"{func_name} ‚ùå", callback_data=f'add_{func_key}')]
            )

    markup.inline_keyboard.append(
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data='btn_back_ru')]
    )
    return markup

@dp.callback_query(lambda call: call.data.startswith('add_'))
async def add_to_favourites_handler(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    func_key = call.data.split('_', 1)[1]
    user_favourites.setdefault(user_id, []).append(func_key)
    save_favourites()
    await call.answer(f"–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
    await edit_favorites_handler(call)

@dp.callback_query(lambda call: call.data.startswith('remove_'))
async def remove_from_favourites_handler(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    func_key = call.data.split('_', 1)[1]
    user_favourites[user_id].remove(func_key)
    save_favourites()
    await call.answer(f"–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
    await edit_favorites_handler(call)


@dp.callback_query(lambda call: call.data == 'personal_account_ru')
async def personal_account_ru(call: CallbackQuery):
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    global do_not_disturb_enabled
    username = call.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    user_id = call.from_user.id

#    dnd_status = "–≤–∫–ª‚úÖ" if do_not_disturb_enabled else "–≤—ã–∫–ª‚ùå"

    text = f"""
üë§ –õ–ò–ß–ù–´–ô –ê–ö–ö–ê–£–ù–¢ ‚Äî {username} :

üåç –Ø–∑—ã–∫: üá∑üá∫

üåê –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä: {browser}

üìÅ –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–∫: {disk_path}

üõ†Ô∏è –í–µ—Ä—Å–∏—è: Pro v1.1

üÜî –í–∞—à ID: {user_id}
    """

    message = await call.message.answer(text, reply_markup=create_personal_account_markup_ru(do_not_disturb_enabled))
    user_data[call.from_user.id] = {"message_id": message.message_id}


@dp.callback_query(lambda call: call.data == 'btn_enable_dnd_ru')
async def enable_dnd_ru(call: CallbackQuery):
    global do_not_disturb_enabled
    do_not_disturb_enabled = True

    await update_personal_account_message(call)


@dp.callback_query(lambda call: call.data == 'btn_disable_dnd_ru')
async def disable_dnd_ru(call: CallbackQuery):
    global do_not_disturb_enabled
    do_not_disturb_enabled = False

    await update_personal_account_message(call)


async def update_personal_account_message(call: CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
#    dnd_status = "–≤–∫–ª‚úÖ" if do_not_disturb_enabled else "–≤—ã–∫–ª‚ùå"

    text = f"""
üë§ –õ–ò–ß–ù–´–ô –ê–ö–ö–ê–£–ù–¢ ‚Äî {username} :

üåç –Ø–∑—ã–∫: üá∑üá∫

üåê –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä: {browser}

üìÅ –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–∫: {disk_path}

üõ†Ô∏è –í–µ—Ä—Å–∏—è: Pro v1.1

üÜî –í–∞—à ID: {user_id}
    """

    await call.message.edit_text(text)
    await call.message.edit_reply_markup(reply_markup=create_personal_account_markup_ru(do_not_disturb_enabled))
    await call.answer(f"–†–µ–∂–∏–º '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å' {'–≤–∫–ª—é—á–µ–Ω' if do_not_disturb_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")


async def update_personal_account_message_voise(call: CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
#    dnd_status = "–≤–∫–ª‚úÖ" if do_not_disturb_enabled else "–≤—ã–∫–ª‚ùå"

    text = f"""
üë§ –õ–ò–ß–ù–´–ô –ê–ö–ö–ê–£–ù–¢ ‚Äî {username} :

üåç –Ø–∑—ã–∫: üá∑üá∫

üåê –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä: {browser}

üìÅ –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–∫: {disk_path}

üõ†Ô∏è –í–µ—Ä—Å–∏—è: Pro v1.1

üÜî –í–∞—à ID: {user_id}
    """

    await call.message.edit_text(text)
    await call.message.edit_reply_markup(reply_markup=create_personal_account_markup_ru(do_not_disturb_enabled))


def get_all_drives():
    partitions = psutil.disk_partitions()
    drives = []

    for partition in partitions:
        drive = partition.device
        drives.append(drive)

    return drives

@dp.callback_query(lambda call: call.data.startswith('change_disk_'))
async def change_disk(call: CallbackQuery):
    new_disk = call.data.split('_')[2]

    global disk_path
    disk_path = new_disk

    save_disk_path(new_disk)
    await update_personal_account_message_disk(call)
    await call.answer(f"–î–∏—Å–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_disk}")

@dp.callback_query(lambda call: call.data == 'change_disk')
async def change_disk_prompt(call: CallbackQuery):
    drives = get_all_drives()

    drive_buttons = [
        [InlineKeyboardButton(text=f"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ {drive}", callback_data=f"change_disk_{drive}")]
        for drive in drives
    ]

    drive_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_personal_account")])

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:", reply_markup=InlineKeyboardMarkup(inline_keyboard=drive_buttons))
    await call.answer()


@dp.callback_query(lambda call: call.data == 'back_to_personal_account')
async def back_to_personal_account(call: CallbackQuery):
    await personal_account_ru(call)
    await call.answer()


@dp.callback_query(lambda call: call.data.startswith('change_disk_'))
async def change_disk(call: CallbackQuery):
    new_disk = call.data.split('_')[2]

    global disk_path
    disk_path = new_disk

    await update_personal_account_message_disk(call)
    await call.answer(f"–î–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_disk}")



async def update_personal_account_message_disk(call: CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
# dnd_status = "–≤–∫–ª‚úÖ" if do_not_disturb_enabled else "–≤—ã–∫–ª‚ùå"

    text = f"""
üë§ –õ–ò–ß–ù–´–ô –ê–ö–ö–ê–£–ù–¢ ‚Äî {username} :

üåç –Ø–∑—ã–∫: üá∑üá∫

üåê –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–∞—É–∑–µ—Ä: {browser}

üìÅ –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–∫: {disk_path}

üõ†Ô∏è –í–µ—Ä—Å–∏—è: Pro v1.1

üÜî –í–∞—à ID: {user_id}
    """

    await call.message.edit_text(text)
    await call.message.edit_reply_markup(reply_markup=create_personal_account_markup_ru(do_not_disturb_enabled))


async def send_start_message(user_id: int):
    try:
        await bot.send_message(ADMIN_ID, f"üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!</b>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_id}</code>", parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def start_bot():
    print(f"smartPC Pro | Lexium\n")
    print(f"–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å ID: {authorized_user_id}")
    await bot.delete_webhook(drop_pending_updates=True)

    user_id = authorized_user_id
    await send_start_message(user_id)

    try:
        await bot.send_message(authorized_user_id, "<b>smartPC Pro | Lexium —Ä–∞–±–æ—Ç–∞–µ—Ç</b>üöÄ", parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        import logging

        logging.basicConfig(level=logging.WARNING)
        logging.getLogger('aiogram').setLevel(logging.WARNING)

        asyncio.run(start_bot())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
